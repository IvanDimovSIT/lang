#include "OperatorsHelp.h"

const std::map<TokenId, std::string> OperatorsHelp::descriptions = {
    {TokenIdAdd, "Add - Adds two values"},
    {TokenIdSubtract, "Subtract - Subtracts the two values"},
    {TokenIdMultiply, "Multiply - Multiplies two values"},
    {TokenIdDivide, "Divide - Divides two values, causes an error if any number in the second value is zero"},
    {TokenIdMod, "Mod - Returns the remainder after division"},
    {TokenIdPower, "Power - Raises the first value to the power of the second value"},
    {TokenIdSine, "Sine - Calculates the sine of the given value in radians"},
    {TokenIdLessThan, "LessThan - Checks if the first value is less than the second value, if so returns 1"},
    {TokenIdGreaterThan, "GreaterThan - Checks if the first value is greater than the second value, if so returns 1"},
    {TokenIdLessThanOrEquals, "LessThanOrEquals - Checks if the first value is less than or equal to the second value, if so returns 1"},
    {TokenIdGreaterThanOrEquals, "GreaterThanOrEquals - Checks if the first value is greater than or equal to the second value, if so returns 1"},
    {TokenIdIsEquals, "IsEquals - Checks if the two values are equal, if so returns 1"},
    {TokenIdNotEquals, "NotEquals - Checks if the two values are not equal, if so returns 1"},
    {TokenIdLogicalNot, "LogicalNot - Performs logical NOT operation"},
    {TokenIdCount, "Count - Returns the count of numbers in the value to the left"},
    {TokenIdSumAll, "SumAll - Sums all numbers in the value to the left"},
    {TokenIdMultiplyAll, "MultiplyAll - Multiplies all numbers in the value to the left"},
    {TokenIdMakeSet, "MakeSet - Returns all unique numbers in the value to the left"},
    {TokenIdUnion, "Union - Combines two values into one (eg. 1,2 | 3,4 = 1,2,3,4)"},
    {TokenIdSelect, "Select - Selects elements from the first values based on the numbers used as indexes in the second"},
    {TokenIdRandom, "Random - Generates a random number within up to the value to the left"},
    {TokenIdCeil, "Ceil - Rounds up to the nearest integer"},
    {TokenIdFloor, "Floor - Rounds down to the nearest integer"},
    {TokenIdRound, "Round - Rounds to the nearest integer"},
    {TokenIdSort, "Sort - Sorts a value in ascending order"},
    {TokenIdReverse, "Reverse - Reverses the order of numbers in a value"},
    {TokenIdEquals, "Equals - Sets the variable to the left equal to the value from the expression to the right"},
    {TokenIdFunctionDeclaration, "FunctionDeclaration - Declares a function (use \"a\" and \"b\" as left and right parameters in the function)"},
    {TokenIdIterate, "Iterate - Iterates from 1 up to the value to the left"},
    {TokenIdIf, "If - Conditional statement for branching (non-zero = true, zero = false)"},
    {TokenIdLoop, "Loop - Loops through a block of code as long as the condition is true"},
    {TokenIdRead, "Read - Reads user input as numbers"},
    {TokenIdWrite, "Write - Writes output to the console"},
    {TokenIdReadText, "ReadText - Reads text from the user"},
    {TokenIdWriteText, "WriteText - Writes text to the console"},
    {TokenIdConvert, "Convert - Converts from numbers to a string"},
    {TokenIdApplyToEach, "ApplyToEach - Applies a function or operator to each number in a value"},
    {TokenIdLeftRotate, "LeftRotate - Rotates numbers in the left value to the left based on the value passed from the right parameter"},
    {TokenIdRightRotate, "RightRotate - Rotates numbers in the left value to the right based on the value passed from the right parameter"},
    {TokenIdRemove, "Remove - Removes numbers from the left value that are contained in the right value (if none remain returns 0)"},
    {TokenIdRemain, "Remain - Removes numbers from the left value that are not contained in the right value (if none remain returns 0)"},
    {TokenIdAsyncStart, "AsyncStart - Starts an asynchronous block"},
    {TokenIdAsyncEnd, "AsyncEnd - Ends an asynchronous block"},
    {TokenIdAsyncJoin, "AsyncJoin - Waits for all asynchronous operations to complete"}
};
